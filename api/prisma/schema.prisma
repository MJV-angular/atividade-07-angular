// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  email              String               @unique
  name               String
  password           String
  posts              Post[]
  cpf                String               @unique
  dateBirth          DateTime
  picture            String?
  address            Address?
  admin              Boolean?             @default(false)
  comments           Comment[]
  courses            UserCourses[]
  Answer             Answer[]
  coursesContentUser coursesContentUser[]
}

model coursesContentUser {
  id              Int           @id @default(autoincrement())
  courseContentId Int
  userId          Int
  complete        Boolean       @default(false)
  favorite        Boolean       @default(false)
  courseContent   CourseContent @relation(fields: [courseContentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  number  String
  city    String
  state   String
  country String
  zipCode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int    @unique
}

model Course {
  id            Int             @id @default(autoincrement())
  name          String
  image         String
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  courseContent CourseContent[]
  user          UserCourses[]
}

model UserCourses {
  id         Int    @id @default(autoincrement())
  courseId   Int
  userId     Int
  Percentage Float  @default(0.0)
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model CourseContent {
  id                 Int                  @id @default(autoincrement())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  course             Course               @relation(fields: [courseId], references: [id])
  courseId           Int
  categories         Categories[]
  description        String
  video_url          String
  text               String
  quiz               Quiz[]
  coursesContentUser coursesContentUser[]
}

model Quiz {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  questions       Question[]
  course          CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
}

model Question {
  id           Int      @id @default(autoincrement())
  title        String
  options      Option[]
  correctIndex Int
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  quizId       Int
  Answer       Answer[]
}

model Option {
  id         Int      @id @default(autoincrement())
  value      String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Categories {
  id              Int           @id @default(autoincrement())
  name            String
  courseContent   CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId Int
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(false)
  title     String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  is_correct Boolean
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}
